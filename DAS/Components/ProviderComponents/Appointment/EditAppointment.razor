@page "/sp-edit-appointment/{id:int}"
@using DAS.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AppState AppState
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<h2>Edit Appointment</h2>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert alert-info">@Message</div>
}

@if (appointment == null)
{
    <p>Loading appointment...</p>
}
else
{
    <EditForm Model="appointment" OnValidSubmit="UpdateAppointment">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label" for="patientSelect">Select Patient:</label>
            <InputSelect @bind-Value="appointment.PatientId" id="patientSelect" class="form-control">
                <option value="">-- Choose a Patient --</option>
                @if (patients != null && patients.Any())
                {
                    @foreach (var p in patients)
                    {
                        <option value="@p.PatientId">@($"{p.FirstName} {p.LastName}")</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => appointment.PatientId)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Date:</label>
            <InputDate @bind-Value="appointment.Date" class="form-control" />
            <ValidationMessage For="@(() => appointment.Date)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Time:</label>
            <InputText @bind-Value="appointment.Time" class="form-control" />
            <ValidationMessage For="@(() => appointment.Time)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Status:</label>
            <InputSelect @bind-Value="appointment.Status" class="form-control">
                <option value="Pending">Pending</option>
                <option value="Confirmed">Confirmed</option>
                <option value="Completed">Completed</option>
                <option value="Canceled">Canceled</option>
            </InputSelect>
            <ValidationMessage For="@(() => appointment.Status)" />
        </div>

        <button type="submit" class="btn btn-success">Save Changes</button>
        <button type="button" class="btn btn-danger ms-2" @onclick="DeleteAppointment">Delete Appointment</button>
    </EditForm>
}

@code {
    [Parameter]
    public int id { get; set; }

    private Appointment? appointment;
    private List<Patient> patients = new();
    private string? Message;
    private int providerId = 1; // For testing, we set a dummy provider ID

    // For testing purposes, we comment out the authentication checks.
    /*
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask is not null)
        {
            var authState = await authenticationStateTask;
            var user = authState.User;
            if (user.Identity?.IsAuthenticated == true)
            {
                // Optionally, check role here.
                var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (!string.IsNullOrEmpty(userIdClaim) && int.TryParse(userIdClaim, out providerId))
                {
                    // Provider ID obtained from authentication.
                }
                else
                {
                    Message = "Provider ID could not be determined or is invalid.";
                    return;
                }
            }
            else
            {
                Message = "You are not authenticated.";
                return;
            }
        }
        else
        {
            Message = "Authentication state is not available.";
            return;
        }
        // ... (rest of the code)
    }
    */

    // Instead, for testing, we skip authentication and set a dummy provider ID.
    protected override async Task OnInitializedAsync()
    {
        providerId = 1;  // Dummy provider ID for testing

        // Load the list of patients.
        await AppState.LoadListsAsync();
        patients = AppState.Patients ?? new List<Patient>();

        // Load the appointment (if it exists) for the given id and provider.
        appointment = await AppState.GetAppointmentById(id, providerId);
        if (appointment == null)
        {
            Message = "Appointment not found or you are not authorized to edit it.";
        }
    }

    private async Task UpdateAppointment()
    {
        if (appointment == null)
        {
            Message = "No appointment data available.";
            return;
        }
        bool success = await AppState.EditAppointment(appointment.AppointmentId, providerId, appointment);
        if (success)
        {
            Message = "Appointment updated successfully.";
            NavigationManager.NavigateTo("/sp-create-appointment");
        }
        else
        {
            Message = "Failed to update appointment.";
        }
    }

    private async Task DeleteAppointment()
    {
        if (appointment == null)
        {
            Message = "No appointment to delete.";
            return;
        }
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this appointment?" });
        if (confirmed)
        {
            bool success = await AppState.DeletePatientAppointment(appointment.AppointmentId);
            if (success)
            {
                Message = "Appointment deleted successfully.";
                NavigationManager.NavigateTo("/sp-create-appointment");
            }
            else
            {
                Message = "Failed to delete appointment.";
            }
        }
    }
}
