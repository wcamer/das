@page "/createAccountSP"
@using System.ComponentModel.DataAnnotations
@using DAS.Models
@using Microsoft.AspNetCore.Identity
@inject AppState AppState
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IPasswordHasher<ServiceProviders> PasswordHasher
@rendermode InteractiveServer

<h1>Create a Service Provider Account</h1>

<EditForm Model="@profile" OnValidSubmit="@(CreateNewServiceProviderProfile)" FormName="CreateServiceProviderAccountForm">

    <DataAnnotationsValidator />
    <ValidationSummary />
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-info">@message</div>
    }

    <div>
        <label>First Name:</label>
        <InputText @bind-Value="profile.FirstName" disabled="@isFormDisabled" placeholder="ex: John" />
        <ValidationMessage For="@(() => profile.FirstName)" />
    </div>
    <div>
        <label>Last Name:</label>
        <InputText @bind-Value="profile.LastName" disabled="@isFormDisabled" placeholder="ex: Smith" />
        <ValidationMessage For="@(() => profile.LastName)" />
    </div>
    <div>
        <label>Email:</label>
        <InputText @bind-Value="profile.Email" disabled="@isFormDisabled" placeholder="ex: randomemail@email.com" />
        <ValidationMessage For="@(() => profile.Email)" />
    </div>
    <div>
        <label>Password:</label>
        <InputText @bind-Value="profile.Password" disabled="@isFormDisabled" />
        <ValidationMessage For="@(() => profile.Password)" />
    </div>
    <div>
        <label>Account Type:</label>
        <InputSelect @bind-Value="profile.Type">
            <option value="">Select Account Type</option>
            <option value="Doctor">Doctor</option>
            <option value="Associate">Associate</option>
            <option value="Admin">Admin</option>
        </InputSelect>
    </div>

    <button type="submit">Submit</button>

</EditForm>

@code {

    //This will give the form structure
    private ServiceProviders profile = new ServiceProviders
        {        
            FirstName = string.Empty,
            LastName = string.Empty,
            Email = string.Empty,
            Password = string.Empty,
            ServiceProvidersId = -1
        };


    private string? message;

    //Flag to disable the form when flipped to true
    bool isFormDisabled = false;

    //This will login the newly created profile owner
    private async Task Authenticate()
    {
        if(profile.Email != null && profile.Password != null)
        {
            var User = await AuthService.LoginAsync(profile.Email, profile.Password);
            if (User != null)
            {
                @* UserService.CurrentUser = User; *@
                await UserService.SetLoggedInUser(User);
                message = "Profile created successfully and redirecting to Dashboard";
                StateHasChanged();
                await Task.Delay(2000);
                NavigationManager.NavigateTo("/dashboard");
            }
            else
            {
                message = "Profile was created successfully but login failed.  Unable to authenticate creditentials, please try logging in the login page.";
            }
        }
        else
        {
            message = "Profile was created successfully but login failed.  Password and or email are null.  Please try logging in in the login page";
        }
        
    }


    private async Task HandleValidSubmit()
    {

        //set logged in user to newly created account
        // make sure that the email and password of the created account are not empty or null
        if (!string.IsNullOrEmpty(profile.Email) && !string.IsNullOrEmpty(profile.Password))
        {
            Console.WriteLine($">>>>>>>>>>>>>>>>>>> email:{profile.Email} password:{profile.Password} ");

            //This checks to see if this profile exists already based on the email and password
            var existingProfile = await AppState.GetServiceProviderByCreds(profile, profile.Email, profile.Password);

            if (existingProfile == null) // needs to equal null
            {
                message = "Profile created successfully but failed to sign-in. Please try signing later";
                return;
            }
            else
            {
                message = "Profile created successfully and profile owner created successfully. Attempting to login...";
                StateHasChanged();

                // Below the commented out line is an idea fragment going to the localStorage to retrieve a valid profile's Id
                @* await JSRuntime.InvokeVoidAsync("setLocalStorageItem", "LoggedInUser", validProfile.ProfileId); *@
                isFormDisabled = true;
                await Task.Delay(2000);
                    
                //Now we will try to log in the newly created profile
                await  Authenticate();
            }
        }
        else
        {
            message = "Account created successfully but failed to sign-in. Please try signing later";
        }
    }


    private async Task CreateNewServiceProviderProfile()
    {
        message = "";
        isFormDisabled = true;

        // Implement creation logic here
        
        //Making sure there was a password put in
        if(profile.Password != null && profile.Email != null)
        {
            //This will hash the given password and will be used to save it in the database
            var hashedPassword = PasswordHasher.HashPassword(profile, profile.Password);

            ServiceProviders newProfile = new ServiceProviders()
            {
                Type = profile.Type,
                FirstName = profile.FirstName,
                LastName = profile.LastName,
                Email = profile.Email,
                Password = hashedPassword
            };
       

            bool duplicateEmailChecker = AppState.ServiceProviders.Any(p => p.Email == newProfile.Email);


            if (duplicateEmailChecker == true || newProfile.Email == null || newProfile.Password == null)
            {
                message = "Please use a valid and/or different email and a valid password";
                isFormDisabled = false;
                return;
            }
            else
            {
                var addProfileToDb = await AppState.AddNewServiceProviderToDb(newProfile);

                //testing the addProfileToDb conditional
                @* var addProfileToDb = true; *@
                @* var addProfileToDb = false; *@


                if (addProfileToDb == true)
                {
                    //updates AppState to reflect changes
                    StateHasChanged();
                    message = "Profile Creation Successful.  Creating adding profile owner as a patient connected to this profile...";

                    //Testing to allow time to verify message works
                    await Task.Delay(2000);

                    await HandleValidSubmit();
                }
                else
                {
                    //error message will be displayed
                    message = "Something went wrong. Profile Creation Canceled.";
                    isFormDisabled = false;
                }
            }
        }
        else
        {
            message = "Something went wrong.  Please put in a valid email and password";
            return;
        }
    }
}