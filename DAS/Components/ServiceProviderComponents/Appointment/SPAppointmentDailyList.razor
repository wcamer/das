@namespace DAS.Components.ServiceProviderComponents.Appointment
@using DAS.Models
@inject AppState AppState
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

@if (AppState.OrderedAppointments == null ||
!AppState.OrderedAppointments.Any(a => a.Date.Date == SelectedDate.Date))
{
    <p>No appointments scheduled for @SelectedDate.ToString("MM/dd/yyyy").</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Patient Name</th>
                <th>Date</th>
                <th>Time</th>
                <th>Status</th>
                <th>Actions</th>
                @* <th>AppointmentId</th> *@
            </tr>
        </thead>
        <tbody>
            @foreach (var appt in AppState.OrderedAppointments
           .Where(a => a.Date.Date == SelectedDate.Date)
           .OrderBy(a => a.Time))
            {
                <tr style="cursor: pointer;" @onclick="() => NavigateToEdit(appt.AppointmentId)">
                    @* <tr style="cursor: pointer;"> *@

                    <td>@appt.Name</td>
                    <td>@appt.Date.ToString("MM/dd/yyyy")</td>
                    <td>@appt.Time</td>
                    <td>@appt.Status</td>
                    <td>
                        @if (ShowCancelButton && appt.Status != "Canceled")
                        {
                            <button class="btn btn-primary btn-sm" @onclick="() => NavigateToEdit(appt.AppointmentId)">
                                Edit
                            </button>

                            <button class="btn btn-danger btn-sm" @onclick="() => OnCancelAppointment.InvokeAsync(appt)">
                                Cancel
                            </button>
                        }
                        else if (appt.Status == "Canceled")
                        {
                            <em>(Canceled)</em>
                        }
                    </td>
                    @* <td>@appt.AppointmentId</td> *@
                </tr>
            }
        </tbody>
    </table>
}

@code {
    // The selected date, passed from the parent.
    [Parameter]
    public DateTime SelectedDate { get; set; } = DateTime.Today;

    // If true, a Cancel button is shown in each row.
    [Parameter]
    public bool ShowCancelButton { get; set; } = false;

    // Callback for the Cancel action.
    [Parameter]
    public EventCallback<Appointment> OnCancelAppointment { get; set; }

    // Navigation method for clickable rows.
    private void NavigateToEdit(int appointmentId)
    {
        NavigationManager.NavigateTo($"/sp-edit-appointment/{appointmentId}");
    }

    protected override async Task OnParametersSetAsync()
    {
        // Load the latest data.
        await AppState.LoadListsAsync();
    }
}
