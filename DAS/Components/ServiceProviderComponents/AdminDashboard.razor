@using DAS.Components.ServiceProviderComponents.Account
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


<PageTitle>Admin Dashboard</PageTitle>

<div>
    <SPProfile/>
</div>

<div>
    <SPList/>
</div>

<div>
    <button @onclick="() => signOutWindow = true" disabled=@signOutWindow>Sign out</button>
    @* <button @onclick="() => signOutWindow = true">Sign out</button> *@

    @if (signOutWindow == true)
    {
        <div>
            <p>@message</p>
            <button @onclick="SignOut" disabled="@isDisabled">Yes</button>
            <button @onclick="@(() => { signOutWindow = false; })" disabled="@isDisabled">No</button>

        </div>
    }
</div>


@code 
{
    private bool signOutWindow = false;
    //private bool signOutSuccess = false;
    private bool isDisabled = false;
    private string? message = "Are you sure you want to log out?";
    private async Task SignOut()
    {
        isDisabled = true;
        await UserService.DeleteLoggedInUser();

        message = "Successfully signed out. Returning to home page";
        StateHasChanged();
        await Task.Delay(5000);
        @* NavigationManager.NavigateTo("/"); *@
        //This isn't an elegant solution but it will work for now
        NavigationManager.NavigateTo("/", forceLoad: true);

    }
}