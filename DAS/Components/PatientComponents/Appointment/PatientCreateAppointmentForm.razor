@page "/createAppointment"  
@using System.ComponentModel.DataAnnotations
@using DAS.Models
@inject AppState AppState
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<h1>Create Appointment</h1>

@if(userId <= 0 )
{
    <div>
        <p>Please log in to make an appointment. Thank You!</p>
    </div>
}
else
{
    @* When the date in the form changes, we update the available slots if needed *@
    @if(changeTrigger != newAppointment.Date)
    {
        GetAvailableSlots();
        if(AvailableSlots.Any())
        {
            // Default to the first available time slot if any are available.
            newAppointment.Time = AvailableSlots[0].Time;
        }
        changeTrigger = newAppointment.Date;
    }

    <EditForm Model="@newAppointment" OnValidSubmit="CreatePatientAppointment" FormName="PatientCreateAppointmentForm">
        <DataAnnotationsValidator />
        <ValidationSummary />
        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert alert-info">@message</div>
        }

        <div>
            <label>Date:</label>
            <InputDate @bind-Value="newAppointment.Date" min="@DateTime.Today.ToString("MM/dd/yyyy")" class="form-control" @onchange="OnDateChanged" />
            <ValidationMessage For="@(() => newAppointment.Date)" />
        </div>
        
        <div>
            <label>Available Time:</label>
            <InputSelect @bind-Value="newAppointment.Time" class="form-control">
                @foreach(var s in AvailableSlots)
                {
                    <option value="@s.Time">@s.Time</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => newAppointment.Time)" />
        </div>

        <div>
            <label>Name:</label>
            <InputSelect @bind-Value="newAppointment.PatientId" class="form-control">
                <option value="">Select A Patient</option>
                @foreach (var p in patients)
                {
                    @* For testing, only display patients whose ProfileId equals userId *@
                    @if(p.ProfileId == userId)
                    {
                        <option value="@p.PatientId">@p.FirstName @p.LastName</option>
                    }
                } 
            </InputSelect>
            <ValidationMessage For="@(() => newAppointment.PatientId)" />
        </div>

        <button type="submit" >Submit</button>
    </EditForm>
    
    <!-- Dynamic visual aid to show available time slots -->
    <section>
        <h2>Available Appointments On: @newAppointment.Date.ToString("MM/dd/yyyy")</h2>
        @if(AvailableSlots.Count == 0)
        {
            <p>----- Please Select A Different Day -----</p>
        }
        else
        {
            <div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Time</th>
                            <th>Available Slots</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var slot in AvailableSlots)
                        {
                            @if(slot.AvailableCount > 0)
                            {
                                <tr>
                                    <td>@slot.Time</td>
                                    <td>@slot.AvailableCount</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        }
    </section>
}

@code {
    // Trigger to know when the selected date has changed.
    private DateTime changeTrigger = DateTime.Now;

    // New appointment to be created.
    private Appointment newAppointment = new Appointment
    {
        PatientId = -1,
        Name = "FirstName LastName",
        Date = DateTime.Now,
        Time = DateTime.Now.TimeOfDay.ToString(),
        Status = "Pending",
        AppointSetterId = -1
    };

    private List<Patient> patients = new();
    private string? message;
    private int userId = -1;
    private List<Appointment> appointmentList = new();

    // AppointmentSlot class for available slots.
    public class AppointmentSlot
    {
        public string Time { get; set; } = string.Empty;
        public int AvailableCount { get; set; }
    }
    // List to hold available slots.
    private List<AppointmentSlot> AvailableSlots { get; set; } = new List<AppointmentSlot>();

    // todayDate is a nullable DateTime that should default to today.
    private DateTime? todayDate;

    // OnAfterRenderAsync is used to load data after the component first renders.
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            var foundUser = await UserService.GetLoggedInUser();
            if(foundUser != null )
            {
                userId = foundUser.UserId;
            }
            else
            {
                return;
            }
            
            await AppState.LoadListsAsync();
            patients = AppState.Patients;
            appointmentList = AppState.Appointments;
            todayDate = AppState.mountainTimeNow;

            newAppointment.Date = AppState.mountainTimeNow;
            newAppointment.Time = AppState.mountainTimeNow.Hour.ToString("h:mm tt");
            StateHasChanged();
        }
    }

    // Called when the date picker value changes.
    private async Task OnDateChanged(ChangeEventArgs e)
    {
        // Use a fallback string if e.Value is null to avoid CS8629 warning.
        var inputValue = e.Value?.ToString() ?? "";
        if (DateTime.TryParse(inputValue, out DateTime newDate))
        {
            newAppointment.Date = newDate;
            await AppState.LoadListsAsync();
            // Update the list of appointments from the AppState.
            appointmentList = AppState.Appointments;
            CheckAvailableTimeSlots();
        }
        else
        {
            message = "Invalid date selection. Please pick a valid date.";
        }
    }

    // Called when the "Load Appointments" button is clicked.
    private void LoadAppointmentsForDate()
    {
        message = $"Appointments loaded for {newAppointment.Date:MM/dd/yyyy}.";
    }

    // Recalculate available time slots for the selected day.
    private void CheckAvailableTimeSlots()
    {
        message = "";
        AvailableSlots.Clear(); // Clear the list when the day changes.
        var currentDay = AppState.mountainTimeNow;
        var chosenDay = newAppointment.Date;

        // Check: if chosen day is in the past compared to today.
        if(todayDate.HasValue && chosenDay.Date < todayDate.Value.Date)
        {
            message = "Please select today's date or a future date";
            return;
        }
        else if(chosenDay.ToString("MM/dd/yyyy") == currentDay.ToString("MM/dd/yyyy"))
        {
            var currentTime = AppState.mountainTimeNow.Hour;
            var dayAppointments = AppState.Appointments.Where(a => a.Date.ToString("MM/dd/yyyy") == chosenDay.ToString("MM/dd/yyyy")).ToList();

            for (int hour = 0; hour < 24; hour++)
            {
                string time = DateTime.Today.AddHours(hour).ToString("h:mm tt");
                int numOfSchedAppoints = dayAppointments.Count(a => a.Time == time);

                // Only show relevant hours for today that are in the future and not fully booked.
                if(numOfSchedAppoints < 2 && hour > currentTime)
                {
                    AvailableSlots.Add(new AppointmentSlot 
                    {
                        Time = time, 
                        AvailableCount = 2 - numOfSchedAppoints
                    });
                }
            }
        }
        else
        {
            // For future days, consider all 24 hours.
            var dayAppointments = AppState.Appointments.Where(a => a.Date.ToString("MM/dd/yyyy") == chosenDay.ToString("MM/dd/yyyy")).ToList();
            for (int hour = 0; hour < 24; hour++)
            {
                string time = DateTime.Today.AddHours(hour).ToString("h:mm tt");
                int numOfSchedAppoints = dayAppointments.Count(a => a.Time == time);
                if(numOfSchedAppoints < 2)
                {
                    AvailableSlots.Add(new AppointmentSlot 
                    {
                        Time = time, 
                        AvailableCount = 2 - numOfSchedAppoints
                    });
                }
            }
        }

        if (AvailableSlots.Any())
        {
            message = $"Open slots found for {newAppointment.Date:MM/dd/yyyy}.";
        }
        else
        {
            message = $"No available time slots for {newAppointment.Date:MM/dd/yyyy} (2 per hour limit reached).";
        }
        StateHasChanged();
        LoadAppointmentsForDate();
    }

    // Create a new appointment.
    private async Task CreatePatientAppointment()
    {
        if(newAppointment.Date < todayDate?.Date)
        {
            message = "Please enter a date that is either today or a future date";
            return;
        }
        else if(newAppointment.Date == todayDate)
        {
            var currentHour = AppState.mountainTimeNow.Hour;
            if(DateTime.TryParse(newAppointment.Time, out DateTime nAT))
            {
                if(nAT.Hour <= currentHour)
                {
                    message = "Please select an appointment slot that is at least the next hour from the current hour";
                    return;
                }
            }
            else 
            {
                message = "Appointment Creation Canceled. Invalid time format";
                return;
            }
        }
        
        if(newAppointment.Time == "h:mm tt")
        {
            message = "Please select a time";
            return;
        }

        newAppointment.AppointSetterId = userId;
        var selectedPatient =  patients.FirstOrDefault(p => p.PatientId == newAppointment.PatientId);
        if(selectedPatient != null)
        {
            newAppointment.Name = $"{selectedPatient.FirstName} {selectedPatient.LastName}";
            Appointment CreatedAppointment = new Appointment
            {
                PatientId = newAppointment.PatientId,
                Name = newAppointment.Name,
                Date = newAppointment.Date,
                Time = newAppointment.Time,
                Status = "Pending",
                AppointSetterId = newAppointment.AppointSetterId
            };

            var addNewAppointmentToDb = await AppState.AddAppointment(CreatedAppointment);
            if(addNewAppointmentToDb)
            {
                GetAvailableSlots();
                StateHasChanged();
                HandleValidSubmit();
            }
            else
            {
                message = "Something went wrong. Appointment Creation Canceled. Try again later or try scheduling an appointment for a different time and/or date";
                return;
            }
        }
        else
        {
            message = "Please select a patient for an appointment";
            return;
        }
    }

    private void HandleValidSubmit()
    {
        message = $"Appointment successfully set for {newAppointment.Name} for {newAppointment.Date:MM-dd-yyyy} at {newAppointment.Time}";
    }

    // Method to update available appointment slots.
    private void GetAvailableSlots()
    {
        message = "";
        AvailableSlots.Clear();
        var currentDay = AppState.mountainTimeNow;
        var chosenDay = newAppointment.Date;
        List<Appointment> dayAppointments = new List<Appointment>();

        if(chosenDay.Date < currentDay.Date)
        {
            message = "Please select today's date or a future date";
            return;
        }
        else if(chosenDay.ToString("MM/dd/yyyy") == currentDay.ToString("MM/dd/yyyy"))
        {
            var currentTime = AppState.mountainTimeNow.Hour;
            dayAppointments = AppState.Appointments.Where(a => a.Date.ToString("MM/dd/yyyy") == chosenDay.ToString("MM/dd/yyyy")).ToList();
            for (int hour = 0; hour < 24; hour++)
            {
                string time = DateTime.Today.AddHours(hour).ToString("h:mm tt");
                int numOfSchedAppoints = dayAppointments.Count(a => a.Time == time);
                if(numOfSchedAppoints < 2 && hour > currentTime)
                {
                    AvailableSlots.Add(new AppointmentSlot 
                    {
                        Time = time, 
                        AvailableCount = 2 - numOfSchedAppoints
                    });
                }
                StateHasChanged();
            }
        }
        else
        {
            dayAppointments = AppState.Appointments.Where(a => a.Date.ToString("MM/dd/yyyy") == chosenDay.ToString("MM/dd/yyyy")).ToList();
            for (int hour = 0; hour < 24; hour++)
            {
                string time = DateTime.Today.AddHours(hour).ToString("h:mm tt");
                int numOfSchedAppoints = dayAppointments.Count(a => a.Time == time);
                if(numOfSchedAppoints < 2)
                {
                    AvailableSlots.Add(new AppointmentSlot 
                    {
                        Time = time, 
                        AvailableCount = 2 - numOfSchedAppoints
                    });
                }
                StateHasChanged();
            }
        }

        if (AvailableSlots.Any())
        {
            message = $"Open slots found for {newAppointment.Date:MM/dd/yyyy}.";
        }
        else
        {
            message = $"No available time slots for {newAppointment.Date:MM/dd/yyyy} (2 per hour limit reached).";
        }
        StateHasChanged();
        LoadAppointmentsForDate();
    }
}
