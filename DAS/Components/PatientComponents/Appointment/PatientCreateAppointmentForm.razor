@page "/createAppointment" 
@using System.ComponentModel.DataAnnotations
@using DAS.Models
@inject AppState AppState
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<h1>Create Appointment</h1>

@if(userId <= 0 )
{
    <div>
        <p>Please log in to make an appointment.  Thank You!</p>
    </div>
}
else
{
    @* <h1>Currently newAppointment.Date = @newAppointment.Date.ToString("MM/dd/yyyy")</h1>
    <h2>Changetrigger = @changeTrigger</h2> *@
    @* <button @onclick="(() => GetAvailableSlots(newAppointment.Date) )">
            Check Availability For: @newAppointment.Date.ToString("MM/dd/yyyy")
    </button> *@
    //changeTrigger will default to today's date and if they don't match then we will update the available slots for the new day and update changeTrigger's value
    @if(changeTrigger != newAppointment.Date)
    {
        GetAvailableSlots();
        changeTrigger = newAppointment.Date;

    }

    <EditForm Model="@newAppointment" OnValidSubmit="@(CreatePatientAppointment)" FormName="PatientCreateAppointmentForm">

        <DataAnnotationsValidator />
        <ValidationSummary />
        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert alert-info">@message</div>
        }


        <div>
            <label>Date:</label>
            <InputDate @bind-Value="newAppointment.Date" min="@DateTime.Today.ToString("MM/dd/yyyy")"/>
            <ValidationMessage For="@(() => newAppointment.Date)" />
        </div>
        

        <div>
            <label>Available Time</label>
            <InputSelect @bind-Value="newAppointment.Time">
                @* ()= > GetAvailableSlots(newAppointment.Date) *@
                @foreach(var s in AvailableSlots)
                {
                    <option value="@s.Time">@s.Time</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => newAppointment.Time)" />
        </div>
        <div>
            <label>Name:</label>
            <InputSelect @bind-Value="newAppointment.PatientId">
            @* <InputSelect> *@
                <option value=""> Select A Patient </option>
                @foreach (var p in patients)
                {
                    @* This is hardcoded for Albert Wesker profileid 1 and patient id 1 *@
                    @* @if(p.ProfileId == 1 || p.PatientId == 1) *@
                    @if(p.ProfileId == userId)
                    {
                        @* <option value="@p.PatientId">@p.FirstName @p.LastName</option> *@
                        <option value="@p.PatientId">@p.FirstName @p.LastName</option>

                    }
                    
                } 
            </InputSelect>
            <ValidationMessage For="@(() => newAppointment.PatientId)" />
        </div>

    

        <button type="submit" >Submit</button>

        
    </EditForm>
    
    //dynamic visual aid to help see what times are available
    <section>
        <h2>Available Appointments On: @newAppointment.Date.ToString("MM/dd/yyyy")</h2>
        @if(AvailableSlots.Count == 0)
        {
            <p>----- Please Select A Different Day -----</p>
        }
        else
        {
            <div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Time</th>
                            <th>Available Slots</th>
                            
                        </tr>
                    </thead>
                    <tbody>
                        
                        @foreach (var slot in AvailableSlots)
                        {
    
                            @if(slot.AvailableCount>0)
                            {
                                <tr>
                                    <td>@slot.Time</td>
                                    <td>@slot.AvailableCount</td>
                                </tr>
                            }

                            
                        }
                    </tbody>
                </table>
            </div>
        }
    </section>
}

@code {

    private DateTime changeTrigger = DateTime.Now;

    private List<Patient> patients = [];
    
    //This is needed to give the form its structure
    private Appointment newAppointment = new Appointment
    {
        PatientId = -1, // default part to check to see if user is logged in or not
        Name = "FirstName LastName",
        Date = DateTime.Now,
        Time = DateTime.Now.TimeOfDay.ToString(),
        Status = "Pending",
        AppointSetterId = -1 //default part of check to see if user is logged in


    };
    // This will contain a specific message that will be shown
    private string? message;

    private int userId = -1;

    private List<Appointment> appointmentList = [];


    
    //Creating appointment slots class
    public class AppointmentSlot
    {
        public string Time { get; set; } = string.Empty;
        public int AvailableCount { get; set; }
    }
    //This will hold the available slots for a particular day
    private List<AppointmentSlot> AvailableSlots {get; set;} = new List<AppointmentSlot>();

    private DateTime? todayDate; // this will default to today
    //private TimeSpan? targetTime ; //Defaults to current time

    

    //protected override async Task OnInitializedAsync()
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
           //hardcoded for testing for user Albert Wesker profileId 1
            //userId = 1;

            //Note change this to a dispoable Profile (any profileId above 5)
            //userId = 8;

            var foundUser = await UserService.GetLoggedInUser();
            if(foundUser != null )
            {
                userId = foundUser.UserId;
                @* StateHasChanged(); *@
            }
            else
            {
                return;
            }
            
            //Loading up the lists from the DB
            await AppState.LoadListsAsync();
            patients = AppState.Patients; 
            appointmentList = AppState.Appointments;
            todayDate = AppState.mountainTimeNow;

            newAppointment.Date = AppState.mountainTimeNow;
            newAppointment.Time = AppState.mountainTimeNow.Hour.ToString("h:mm tt");
            @* GetAvailableSlots(); *@
            StateHasChanged();
            

        }
        

    } // end of OnAfterRenderAsync(bool firstRender)


    private void HandleValidSubmit()
    {
        message = $"Appointment successfully set for {newAppointment.Name} for {newAppointment.Date.ToString("MM-dd-yyyy")} at {newAppointment.Time}";
        
        //send user back the the home page but can be changed to send back to customer's dashboard
        //NavigationManager.NavigateTo("/");

    }

    


    private async Task CreatePatientAppointment()
    {


        // Implement creation logic here

        //This is a check to make sure the appointment that is about to be created is valid
        //If the appointment date is in the past
        if(newAppointment.Date < todayDate.Value.Date)
        {
            //Console.WriteLine($"here is newappDate  == {newAppointment.Date.Date} here is todayDAte {todayDate}");
            message = "Please enter a date that is either present day or a future date";
            return;
        }
        //if the appointment date is the same present day
        else if(newAppointment.Date == todayDate)
        {
            var currentHour = AppState.mountainTimeNow.Hour;
            //reformating the appointment Time in preparation for comparison
            if(DateTime.TryParse(newAppointment.Time, out DateTime nAT))
            {
                //if the converted appointment time is before or equal the current hour
                if(nAT.Hour <= currentHour)
                {
                    message = "Please select an appointment slot that is at least the next hour from the current hour";
                    return;
                }
            }
            else 
            {
                message = "Appointment Creation Canceled. Invalid time format";
            }

        }// at this point it has been determined that the appointment's date is at least present day or later and in a future hour
        
        if(newAppointment.Time == "h:mm tt")
        {
            message = "Please select a time";
            return;
        }

        //Setting who set the appointment equal to the logged in user's id
        newAppointment.AppointSetterId = userId;

        
        // This will get a Patient object and assign to selectedPatient
        var selectedPatient =  patients.FirstOrDefault(p => p.PatientId == newAppointment.PatientId);

        //This will check to make sure there is a valid patient that was selected
        if(selectedPatient != null)
        {
            //This will assign the name who the appointment is for
            newAppointment.Name = $"{selectedPatient.FirstName} {selectedPatient.LastName}";
            
            //Console.WriteLine($"{newAppointment.AppointmentId} {newAppointment.Name} {newAppointment.AppointSetterId} {newAppointment.Time}!!!!!!!!!!!!");
            
            
            //This will generate a new appointment everytime this function is called making every appointment unique
            Appointment CreatedAppointment = new Appointment
            {
                PatientId = newAppointment.PatientId, // default part to check to see if user is logged in or not
                Name = newAppointment.Name,
                Date = newAppointment.Date,
                Time = newAppointment.Time,
                Status = "Pending",
                AppointSetterId = newAppointment.AppointSetterId //default part of check to see if user is logged in
            };

             //Console.WriteLine($"{CreatedAppointment.AppointmentId} {CreatedAppointment.Name} {CreatedAppointment.AppointSetterId} {CreatedAppointment.Time} ********************");


            var addNewAppointmentToDb = await AppState.AddAppointment(CreatedAppointment);
            //testing line
            //var addNewAppointmentToDb = true;


            if(addNewAppointmentToDb == true)
            {
                //updates AppState to reflect changes
                GetAvailableSlots(); //shows updated available slots
                StateHasChanged();
                
                HandleValidSubmit();
            }
            else
            {
                //error message will be displayed 
                message = "Something went wrong.  Appointment Creation Canceled. Try again later or try scheduling an appointment for a different time and/or date";
                return;
            }
        }
        //if there wasn't a valid patient selected it will display a specific error message
        else
        {
            message = "Please select a patient for an appointment";
            return;
        }
        


    }// end of CreatePatientAppointment



    private void GetAvailableSlots()
    {
        message ="";
        AvailableSlots.Clear(); // this will clear out the available slots list when the day changes

        var currentDay = AppState.mountainTimeNow;
        
        var chosenDay = newAppointment.Date;
        List<Appointment> dayAppointments = new List<Appointment>();

        //This is a check to ensure that no past appointments are able to be seen as available
        //If the chosenDay is in the past compared to today...
        if(chosenDay.Date < currentDay.Date)
        {
            message = "Please select today's date or a future date";
            return;

        }
        // This will handle the same day appointments
        else if(chosenDay.ToString("MM/dd/yyyy") == currentDay.ToString("MM/dd/yyyy"))
        {
            var currentTime = AppState.mountainTimeNow.Hour;
            dayAppointments = AppState.Appointments.Where(a => a.Date.ToString("MM/dd/yyyy") == chosenDay.ToString("MM/dd/yyyy")).ToList();

            for (int hour = 0; hour <24; hour++)
            {
                string time = DateTime.Today.AddHours(hour).ToString("h:mm tt");
                int numOfSchedAppoints = dayAppointments.Count(a => a.Time == time);


                //Only will show relevant hours that are available same-day and not hours that have passed
                if(numOfSchedAppoints < 2 && hour > currentTime)
                {
                    AvailableSlots.Add(new AppointmentSlot {Time = time, 
                    AvailableCount = 2 - numOfSchedAppoints});
                
                }
                StateHasChanged();

            }
        }
        //This will handle all future days
        else
        {
            dayAppointments = AppState.Appointments.Where(a => a.Date.ToString("MM/dd/yyyy") == chosenDay.ToString("MM/dd/yyyy")).ToList();

        
            for (int hour = 0; hour <24; hour++)
            {
                string time = DateTime.Today.AddHours(hour).ToString("h:mm tt");
                int numOfSchedAppoints = dayAppointments.Count(a => a.Time == time);

                @* Console.WriteLine($"???????? --------------------# of appointments scheduled at time: {time} / {hour} is = {numOfSchedAppoints} "); *@


                if(numOfSchedAppoints < 2)
                {
                    AvailableSlots.Add(new AppointmentSlot {Time = time, 
                    AvailableCount = 2 - numOfSchedAppoints});
                
                }
                StateHasChanged();

            }
        }



    } // end of GetAvailableSlots function

    




}
