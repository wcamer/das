@using Microsoft.EntityFrameworkCore
@using DAS.Models
@inject NavigationManager NavigationManager
@inject AppState AppState
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

@if (userId <= 0)
{
    <p>----------- Login To view information ---------</p>
}
else
{
    @if (appointments != null)
    {
        @* This condition will make sure there is at least 1 appointment that is either completed or canceled
            and that it matches the filtered patient list that contains only the patients that are connected to the logged in user's profile        
         *@

        @if (appointments.Any(a => ((patients.Any(p => a.Name == $"{p.FirstName} {p.LastName}"))
        && (a.Status == "Completed" || a.Status == "Canceled"))))
        {
            <div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>
                                Name
                            </th>
                            <th>
                                Appointment Date
                            </th>
                            <th>
                                Status
                            </th>

                            @* this is for testing *@
                            @* <th>Appointment Id</th> *@
                        </tr>
                    </thead>

                    <tbody>
                        @* This will go through all the appointments and pick out the appointments where the name matches the filtered list of patients and the status is completed or canceled*@
                        @foreach (var appointment in appointments.Where(a =>
                                    patients.Any(p => a.Name == $"{p.FirstName} {p.LastName}")
                                    && (a.Status == "Completed" || a.Status == "Canceled")))
                        {
                            <tr>
                                <td>
                                    @(appointment.Name)
                                </td>
                                <td>
                                    @(appointment.Date.ToString("MM/dd/yyyy"))
                                </td>

                                <td>
                                    @(appointment.Status)
                                </td>

                                @* for dev testing *@
                                @* <td>
                                    @(appointment.AppointmentId)
                                </td> *@

                            </tr>

                        }



                    </tbody>
                </table>


            </div>
        }
        else
        {
            <div>
                <p>--------- No History Yet -----------</p>
                <p>Appointments must be completed To show here</p>
            </div>
        }
    }
    else
    {
        <div>
            <p>--------- No History Yet To Show-----------</p>
        </div>

    }
}



@code {

    private List<Appointment> appointments = [];
    private List<Patient> patients = [];

    private int userId = -1;


    //protected override async Task OnInitializedAsync()
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //This is a hardcoded example for Albert Wesker ProfileId 1
            //Another acceptable test user is Cloud Strife ProfileId 3
            //userId = 1;

            //To use a disposable test user use any user greater than 4
            //userId = 1;

            var foundUser = await UserService.GetLoggedInUser();
            if (foundUser != null)
            {
                userId = foundUser.UserId;
                @* StateHasChanged(); *@
            }
            else
            {
                return;
            }

            //Gets data in the lists and synced up
            await AppState.LoadListsAsync();
            //Copies the the data in the Appointments in the state file to the local variable
            appointments = AppState.OrderedAppointments;
            var allPatients = AppState.Patients;
            patients = allPatients.Where(p => p.ProfileId == userId).ToList();

            StateHasChanged();

        }




    }













}