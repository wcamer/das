@using Microsoft.EntityFrameworkCore
@using DAS.Models
@inject NavigationManager NavigationManager
@inject AppState AppState
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

@inject UserService UserService
@inject AuthService AuthService

<div>
    @if (userId <= 0)
    {
        <p>-------- Login to view information --------</p>
    }
    else
    {
        @if (appointments.Any())
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>
                            Name
                        </th>
                        <th>
                            Appointment Date
                        </th>
                        <th>
                            Time
                        </th>
                        <th>
                            Status
                        </th>
                        <th></th>
                        @* this is for testing *@
                        @* <th>Appointment Id</th> *@
                    </tr>
                </thead>
                <tbody>

                    @foreach (var appointment in appointments)
                    {
                        //Hardcoded example for albert wesker patientid 1 profileid 1
                        //another acceptable hardcoded example for testing is Cloud Strife patient id 5 profileid 3
                        @* @if (appointment.AppointSetterId == userId && appointment.Status == "Pending")
                        { *@
                        var editRoute = $"/edit-appointment/{appointment.AppointmentId}";


                        <tr>
                            <td>
                                @(appointment.Name)
                            </td>
                            <td>
                                @(appointment.Date.ToString("MM/dd/yyyy"))
                            </td>
                            <td>
                                @(appointment.Time)
                            </td>

                            <td>
                                @(appointment.Status)
                            </td>
                            @* The edit and delete options will depend on what the status is.  
                                            If it's pending, then edit and delete will be displayed, 
                                            else then it will show a message that it isn't changeable  *@
                            <td>
                                <button>
                                    <NavLink class="nav-link" href=@editRoute>
                                        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Edit
                                    </NavLink>
                                </button>
                            </td>
                            @* for dev testing *@
                            @* <td>
                                        @(appointment.AppointmentId)
                                    </td> *@

                        </tr>
                        @* } *@

                    }
                    @* } *@





                </tbody>
            </table>
        }
        else
        {
            <p>-------- No Appointments Scheduled ---------</p>
        }

    }

</div>

@code {

    private List<Appointment> appointments = [];
    private List<Patient> patients = [];
    private int userId = -1;


    //protected override async Task OnInitializedAsync()
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //hardcoded for testing for user Albert Wesker profileId 1 patientId 1
            //another accepted test user is Cloud Strife profileId 3 patientId 5
            //Note change this to a dispoable Profile (any profileId above 5)
            //userId = 8;

            var foundUser = await UserService.GetLoggedInUser();
            if (foundUser != null)
            {
                userId = foundUser.UserId;
                @* StateHasChanged(); *@
            }
            else
            {
                return;
            }


            //Gets data in the lists and synced up
            await AppState.LoadListsAsync();

            //getting a list of all the patients
            var allPatients = AppState.Patients;
            //filtering out all patients not connencted to the logged in user's profile
            patients = allPatients.Where(p => p.ProfileId == userId).ToList();


            //Copies the the data in the Appointments in the state file to the local variable
            //The filter is based on patient name in a list of filtered patient names based on logged in user's id
            @foreach (var appointment in AppState.OrderedAppointments.Where(a =>
            patients.Any(p => a.Name == $"{p.FirstName} {p.LastName}")
            && a.Status == "Pending"))
            {
                appointments.Add(appointment);
            }
            StateHasChanged();

        }


    } // end of OnAfterRenderAsync(bool firstRender)




}