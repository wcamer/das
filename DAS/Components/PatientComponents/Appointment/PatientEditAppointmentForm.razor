@page "/edit-appointment/{id:int}"
@* @page "/edit-appointment" *@
@rendermode InteractiveServer

@using DAS.Models
@using DAS.Components
@inject AppState AppState
@inject NavigationManager NavigationManager
@* @inject IJSRuntime JSRuntime *@
@inject UserService UserService


<h1>Edit Appointment</h1> 
@if(userId <= 0)
{
    <p>----------Please login to use this function----------------</p>
}
else
{
    <EditForm Model="@appointment" FormName="PatientEditAppointmentForm" disabled="@deleteWarningFlag"> 
        <DataAnnotationsValidator />
        <ValidationSummary />
        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert alert-info">@message</div>
        }
        @if (deleteWarningFlag == true)
        {
            <div>
                <button @onclick="ProcessDeletePatientAppointment" disabled="@isFormDisabled">Yes</button>
                <button @onclick="@(() => { deleteWarningFlag = false; message = string.Empty; })" disabled="@isFormDisabled">No</button>
            </div>
        }

        <div>
            <label>Date:</label>
            <InputDate @bind-value="appointment.Date" disabled="@deleteWarningFlag" />
            <ValidationMessage For="@(() => appointment.Date)" />
        </div>

        <div>
            <label>Time:</label>
            <input @bind-value="appointment.Time" disabled="@deleteWarningFlag" />
            <ValidationMessage For="@(() => appointment.Time)" />
        </div>

        <div>
            <label>Appointment Set For:</label>
            <input value="@targetPatient" disabled />
        </div>

        <div>
            <label>Name:</label>
            <InputSelect @bind-Value="appointment.PatientId" disabled="@deleteWarningFlag">
                <option value="">Select A Patient</option>
                @foreach (var p in patients)
                {
                    //hardcoded example for Albert Wesker profileid 1 patientId 1
                    //another acceptable test user is Cloud Strife profileid 3 patientId 5
                    @* @if (p.ProfileId == 1 || p.PatientId == 1) *@
                    @if(p.ProfileId == userId)
                    {
                        <option value="@p.PatientId">@p.FirstName @p.LastName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => appointment.PatientId)" />
        </div>

        <button type="submit" @onclick="HandleValidSubmit" disabled="@deleteWarningFlag">Submit</button>
        <button @onclick="@(() => { deleteWarningFlag = true; message = deleteWarningMessage; })" disabled="@deleteWarningFlag">Delete</button>
    </EditForm>
}



@code {
    //Structure of the form
    private Appointment appointment = new Appointment
    {
            PatientId = -1, // default part to check to see if user is logged in or not
            Name = "FirstName LastName",
            Date = DateTime.Now,
            Time = "7:00 PM",
            Status = "Pending",
            AppointSetterId = -1 //default part of check to see if user is logged in

    };

    [Parameter]
    public int id {get; set;}
    private string? message;
    @* int appointmentID; *@
    int userId = -1;
    bool deleteWarningFlag = false;
    
    //This is a flag to disable the form if the appointment is deleted
    bool isFormDisabled = false;
    


    string? targetPatient;
    private List<Patient> patients = [];
    
    //This will start holding placeholder data but will be edited when the target appointment is loaded.
    private Appointment oldAppointment = new Appointment
     {
        PatientId = -1, // default part to check to see if user is logged in or not
        Name = "FirstName LastName",
        Date = DateTime.Now,
        Time = "7:00 PM",
        Status = "Pending",
        AppointSetterId = -1 //default part of check to see if user is logged in


    };

    //testing purposes
    @* bool dataLoadedFlag = false; *@
    private string deleteWarningMessage = $"Are you sure you want to delete this appointment? (If you click yes, this will permanently delete the appointment)";
    
    @* protected override async Task OnInitializedAsync() *@
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            //Loading up the lists from the DB
            await AppState.LoadListsAsync();
            patients = AppState.Patients ;

            //note this is hardcoded for albert wesker profileid 1
            //userId = 1;
            //note another hardcoded example can be Cloud Strife profileid 3
            //userId = 8;
            //find the current user creds
            var foundUser = await UserService.GetLoggedInUser();
            if(foundUser != null )
            {
                userId = foundUser.UserId;
            }
            else
            {
                return;
            }

            var foundAppointment = await AppState.GetAppointmentById(id , userId);
            if(foundAppointment != null)
            {
                appointment = foundAppointment;
                
                targetPatient = appointment.Name;

                //This will retain appointment info before it gets changed.
                oldAppointment = new Appointment
                {
                    PatientId = foundAppointment.PatientId,
                    Name = foundAppointment.Name,
                    Date = foundAppointment.Date,
                    Time = foundAppointment.Time,
                    Status = foundAppointment.Status,
                    AppointSetterId = foundAppointment.AppointSetterId
                };
                StateHasChanged();
            }
            else
            {
                message = "Could not find appointment...";
            }
        }
        
    }

    // OnAfterRenderAsnc(bool firstRender) goes here
    
    


    @* private async Task HandleValidSubmit() *@
    private async Task HandleValidSubmit()
    {
        // Logic for handling form submission goes here
        @* return Task.CompletedTask; // Return a completed task *@
        @* message = "Appointment Successfully updated.";  *@
        await SubmitEditPatientAppointment(appointment);
    }

    //This will prep the edited appointment and then send it off
    private async Task SubmitEditPatientAppointment(Appointment editedAppointment)
    {
        

        // Implement edit logic here

        //hardcoded example for albert wesker profileid NOTE: this will be changed
        @* appointment.AppointSetterId = 1; *@

        
        // This will get a Patient object and assign to selectedPatient
        var selectedPatient =  patients.FirstOrDefault(p => p.PatientId == editedAppointment.PatientId);

        //This will check to make sure there is a valid patient that was selected
        if(selectedPatient != null)
        {
            //This will assign the name who the appointment is for
            editedAppointment.Name = $"{selectedPatient.FirstName} {selectedPatient.LastName}";
            
            @* Console.WriteLine($"This is in the PatientEditAppointmentForm...........................\n{editedAppointment.AppointmentId} {editedAppointment.Name} {editedAppointment.AppointSetterId} {editedAppointment.Time}!!!!!!!!!!!!"); *@
            
            
            
            
            //This will take in the "id" that was a route parameter, the user's id (in testing it is hardcoded for Albert wesker profileId 1), and the appointment
            var editedAppointmentToDb = await AppState.EditAppointment(id,userId,editedAppointment);
            //testing line
            //var addNewAppointmentToDb = true;


            if(editedAppointmentToDb == true)
            {
                //updates AppState to reflect changes
                StateHasChanged();
                
                @* await HandleValidSubmit(); *@
                message = $"Appointment updated successfully! \nPrevious Appointment Info: {oldAppointment.Name} {oldAppointment.Date.ToString("MM-dd-yyyy")} {oldAppointment.Time} \nUpdated Appointment Info: {editedAppointment.Name} {editedAppointment.Date} {editedAppointment.Time} ";
                //This will replace the previous data in OldAppointment now that we don't need it anymore since it was displayed.
                oldAppointment = new Appointment
                {
                    PatientId = editedAppointment.PatientId,
                    Name = editedAppointment.Name,
                    Date = editedAppointment.Date,
                    Time = editedAppointment.Time,
                    Status = editedAppointment.Status,
                    AppointSetterId = editedAppointment.AppointSetterId
                };

                targetPatient = editedAppointment.Name;
            }
            else
            {
                //error message will be displayed 
                message = "Something went wrong.  Appointment Update Canceled. Try again later or try scheduling an appointment for a different time and/or date.";
                @* Console.WriteLine(message); *@
            }
        }
        //if there wasn't a valid patient selected it will display a specific error message
        else
        {
            message = "Please select a patient for an appointment you are trying to edit.";
        }
        


    }// end of SubmitEditPatientAppointment


    private async Task ProcessDeletePatientAppointment()
    {
       var deletionCompleted = await AppState.DeletePatientAppointment(appointment.AppointmentId);
        deleteWarningFlag = false;

        // test if the deletion succeeded
        @* var deletionCompleted = true; *@

        //test if the deletion failed
        @* var deletionCompleted = false; *@

       if (deletionCompleted == true)
       {
            message = "Appointment Deleted Successfully.  Returning to Dashboard";
            isFormDisabled = true;
            await Task.Delay(2000);
            //This is for testing to see if the navigation will redirect after it is completed
            //This worked
            NavigationManager.NavigateTo("/dashboard");
       }
       else
       {
            message = "Something went wrong.  Deletion Operation canceled";
            
       }


    }// end of ProcessDeletePatientAppointment






}