@using DAS.Components.PatientComponents.Appointment
@using DAS.Components.PatientComponents.Account
@using DAS.Components.PatientComponents
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Patient Dashboard</PageTitle>

@if (userId <= 0 || profileType != "Patient")
{
    <p>-------- Please login to view --------</p>
}
else
{
    <div class="dashboard-container">
        <div class="card patient-profile">
            <PatientProfile />
        </div>

        <div class="card options-section">
            <h2>Options</h2>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/editProfile">Edit Profile</NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/createAppointment">Add Appointment</NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/addGroupMember">Add New Patient To Group</NavLink>
            </div>
            <button @onclick="() => SignOut()" disabled=@signOutWindow>Sign out</button>
        </div>
    </div>

    <div class="dashboard-container">
        <div class="card patient-group">
            <h2>Patient Group</h2>
            <PatientGroup />
        </div>
        <div class="card appointments-section">
            <h2>Upcoming Appointments</h2>
            <PatientUpcomingAppointments />
        </div>
        <div class="card appointments-section">
            <h2>Appointment History</h2>
            <PatientAppointmentHistory />
        </div>
    </div>
}

@code {

    public int userId = -1;
    private string profileType = "Non-user";

    private bool signOutWindow = false;
    private bool isDisabled = false;
    private string? message = "Are you sure you want to log out?";

    //protected override async Task OnInitializedAsync()
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var foundUser = await UserService.GetLoggedInUser();
            //Console.WriteLine($"*****************foundUser:{foundUser}");

            if (foundUser != null)
            {
                userId = foundUser.UserId;
                profileType = foundUser.Type;
                //Console.WriteLine($"*****************updated userId:{userId}");
                StateHasChanged();
            }
            else
            {
                //If there is no user found then we don't have to perform the rest of the function
                // Console.WriteLine($"*****************foundUser is null userId:{userId}");

                return;
            }
        }


    }



    private async Task SignOut()
    {
        isDisabled = true;
        signOutWindow = true;
        await UserService.DeleteLoggedInUser();

        @* message = "Successfully signed out. Returning to home page";
        StateHasChanged();
        await Task.Delay(2000); *@

        //NavigationManager.NavigateTo("/", forceLoad: true);
        //Not an elegant solution but will work for now
        NavigationManager.NavigateTo("/", forceLoad: true);

    }





}