@using DAS.Models
@using Microsoft.EntityFrameworkCore
@inject AppState AppState
@rendermode InteractiveServer

<div>
    @if (userId <= 0)
    {
        <p>-------- Login to view information --------</p>
    }
    else
    {
        <button @onclick="TogglePatients" class="btn btn-primary mb-2">
            @(ShowPatients ? "Hide Patients" : "Show Patients")
        </button>
        @if(ShowPatients)
        {
            @if (profiles.Any())
            {
               <table class="table">
                <thead>
                    <th>Name</th>
                    <th>PatientId</th>
                    <th>Actions</th>
                </thead>

                <tbody>
                    @foreach (var patient in profiles)
                    {
                        var infoRoute = $"/patient-details/{patient.PatientId}";
                        <tr>
                            <td>
                                @(patient.FirstName + " " + patient.LastName)
                            </td>

                            <td>@(patient.PatientId)</td>
                            <td>
                                <button>
                                    <NavLink class="nav-link" href=@infoRoute>
                                        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Info/Notes
                                    </NavLink>
                                </button>
                            </td>

                        </tr>
                    }
                </tbody>

               </table>
            }
            else 
            {
                <p>-------- No Patients Found ---------</p>
            }
        }
    }

</div>


@code
{

    private bool ShowPatients = false; // Controls visibility

    private void TogglePatients()
    {
        ShowPatients = !ShowPatients;
    }

    private List<Patient> profiles = [];

    private int userId = -1;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            var foundUser = await UserService.GetLoggedInUser();
            if (foundUser != null)
            {
                userId = foundUser.UserId;
            }
            else
            {
                return;
            }


            //Gets data in the lists and synced up
            await AppState.LoadListsAsync();
            profiles = AppState.Patients;
            StateHasChanged();
            
        }
    }
}
