@using DAS.Models
@using System.ComponentModel.DataAnnotations
@inject AppState AppState
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PatientList/>

<EditForm Model="@loginModel" OnValidSubmit="Login" FormName="LoginForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (!string.IsNullOrEmpty(loginModel.Message))
    {
        <div class="alert alert-info">@loginModel.Message</div>
    }
    @*if (logOutFlag == true)
    {
        <p>Are you sure you want to sign out? </p>
        <button @onclick="signOut">Yes</button>
        <button @onclick="@(() => {logOutFlag = false; loginModel.Message = string.Empty;} )">No</button>
    }
    *@
    <p>Please Login</p>

    <label>Email:</label>
    <InputText @bind-Value="loginModel.Email" type="email" />

    <label>Password:</label>
    <InputText @bind-Value="loginModel.Password" type="password" />
    <button>Login</button>
    @*if (activeUser == true)
    {
        <button @onclick="@(() => {logOutFlag= true; loginModel.Message = logOutWarningMessage; })">Sign Out</button>

    }*@
</EditForm>

@code 
{   
    //Initialize Object for data to be stored into
    private LoginModel loginModel = new LoginModel
    {
        Email = string.Empty,
        Password = string.Empty,
        Message = string.Empty
    };

    //Used for displaying a message to the user if logged in, logged out, or login error


    // This Bool is for activating the signout button if a user is logged in.
    //bool activeUser = false;

    // This Bool is to check for signout confirmation after displayed warning.
    //bool logOutFlag = false;

    //private string logOutWarningMessage = "Are you sure you want to log out?";

    //Class used to store/track the data entered into the Editform
    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string? Email { get; set; }

        [Required]
        public string? Password { get; set; }

        public string? Message;
    }

    //This function will log in a user using local storage, may need to be updated after authentication is figured out.
    private async Task Login()
    {   
        // Checks if both inputs have content, and runs a query looking for an account with a matching username and password
        if (!string.IsNullOrEmpty(loginModel.Email) && !string.IsNullOrEmpty(loginModel.Password))
        {
            var validAccount = await AppState.GetProfileByCreds(loginModel.Email, loginModel.Password);
            
            if (validAccount == null) // needs to equal null
            {
                loginModel.Message = "Failed to login. Email and or Password may be incorrect";
                return;
            }

            else
            {
                loginModel.Message = "Login was successful.";
                //activeUser = true;
                //Insert whatever code here to deal with the login, need to talk to team about
            }
        }
        
    }

    /*
    This function was how William handled login in the past
    Checks local storge for stored userid-- to my understanding, this is a temporary way to keep someone logged in
    until authentication is figured out. 
    We would need to include a js script somewhere for functions to handle local storage.
    
    private async Task<int> getLoggedInUser()
    {
        string targetString = await JSRuntime.InvokeAsync<string>("getLocalStorageItem", "LoggedInUser");
        if (!string.IsNullOrEmpty(targetString) && int.TryParse(targetString, out int userId))
        {
            return userId;
        }
        else
        {
            return 0;
        }
    }*/
    
    
    public async Task signOut()
    {
        //Add whatever code to deal with the logout. Below code is placeholder for now.
        loginModel.Message = "Log out was successful.";
        //activeUser = false;
        //logOutFlag = false;

    }
}